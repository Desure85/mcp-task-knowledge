name: Docker Build Matrix

on:
  workflow_dispatch:
    inputs:
      platforms:
        description: "Target platforms (comma-separated)"
        required: false
        default: "linux/amd64"

jobs:
  build:
    name: Build and Push Images
    runs-on: ubuntu-latest
    permissions:
      contents: read
      packages: write
    env:
      # default registry for pushes
      REGISTRY: ghcr.io
      # default platforms
      PLATFORMS: ${{ github.event.inputs.platforms || 'linux/amd64' }}

    strategy:
      fail-fast: false
      matrix:
        include:
          # Basic variants (no catalog embedded) â€” use prebuilt base images (extbase)
          - variant: bm25
            target: runtime-bm25-extbase
            embedCatalog: false
          - variant: cpu
            target: runtime-onnx-cpu-extbase
            embedCatalog: false
          - variant: gpu
            target: runtime-onnx-gpu-extbase
            embedCatalog: false

          # With-catalog variants
          - variant: bm25-cat
            target: mcp-bm25-with-catalog
            embedCatalog: true
          - variant: cpu-cat
            target: mcp-onnx-cpu-with-catalog
            embedCatalog: true
          - variant: gpu-cat
            target: mcp-onnx-gpu-with-catalog
            embedCatalog: true

    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Set up QEMU (for future multi-arch)
        uses: docker/setup-qemu-action@v3

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3

      - name: Log in to GHCR
        uses: docker/login-action@v3
        with:
          registry: ${{ env.REGISTRY }}
          username: ${{ github.actor }}
          password: ${{ secrets.GITHUB_TOKEN }}

      - name: Compute repo/image names
        id: names
        shell: bash
        run: |
          set -euo pipefail
          owner_lc="${GITHUB_REPOSITORY_OWNER,,}"
          echo "owner=${owner_lc}" >> "$GITHUB_OUTPUT"
          echo "image_repo=ghcr.io/${owner_lc}/mcp-task-knowledge" >> "$GITHUB_OUTPUT"
          echo "base_deps=ghcr.io/${owner_lc}/mcp-base-bm25:latest" >> "$GITHUB_OUTPUT"
          echo "base_models=ghcr.io/${owner_lc}/mcp-base-onnx:latest" >> "$GITHUB_OUTPUT"
          echo "base_gpu=ghcr.io/${owner_lc}/mcp-base-onnx-gpu:latest" >> "$GITHUB_OUTPUT"

      - name: Derive tags
        id: meta
        run: |
          set -euo pipefail
          VERSION_TAG="${GITHUB_SHA::12}"
          if [[ "${GITHUB_REF_TYPE}" == "tag" ]]; then
            VERSION_TAG="${GITHUB_REF_NAME}"
          elif [[ "${GITHUB_REF_NAME}" =~ ^(main|master)$ ]]; then
            VERSION_TAG="latest"
          fi
          echo "version=${VERSION_TAG}" >> "$GITHUB_OUTPUT"

      - name: Compute build-args
        id: args
        run: |
          set -euo pipefail
          # For non -cat variants we disable embedding to speed up build
          if [[ "${{ matrix.embedCatalog }}" == "true" ]]; then
            echo "SC_GIT=https://github.com/Desure85/service-catalog.git" >> $GITHUB_OUTPUT
            echo "SC_TGZ=" >> $GITHUB_OUTPUT
          else
            echo "SC_GIT=" >> $GITHUB_OUTPUT
            echo "SC_TGZ=" >> $GITHUB_OUTPUT
          fi
          # External base images (used by *-extbase targets)
          echo "BASE_DEPS_IMAGE=${{ steps.names.outputs.base_deps }}" >> $GITHUB_OUTPUT
          echo "BASE_MODELS_IMAGE=${{ steps.names.outputs.base_models }}" >> $GITHUB_OUTPUT
          echo "BASE_GPU_IMAGE=${{ steps.names.outputs.base_gpu }}" >> $GITHUB_OUTPUT

      - name: Build and push
        uses: docker/build-push-action@v6
        with:
          context: .
          file: ./Dockerfile
          target: ${{ matrix.target }}
          platforms: ${{ env.PLATFORMS }}
          push: ${{ github.event_name != 'pull_request' }}
          provenance: false
          sbom: false
          build-args: |
            NPM_REGISTRY=https://registry.npmjs.org/
            SERVICE_CATALOG_GIT=${{ steps.args.outputs.SC_GIT }}
            SERVICE_CATALOG_TARBALL=${{ steps.args.outputs.SC_TGZ }}
            BASE_DEPS_IMAGE=${{ steps.args.outputs.BASE_DEPS_IMAGE }}
            BASE_MODELS_IMAGE=${{ steps.args.outputs.BASE_MODELS_IMAGE }}
            BASE_GPU_IMAGE=${{ steps.args.outputs.BASE_GPU_IMAGE }}
          cache-from: type=gha
          cache-to: type=gha,mode=max
          tags: |
            ${{ steps.names.outputs.image_repo }}:${{ matrix.variant }}-${{ steps.meta.outputs.version }}
            ${{ steps.names.outputs.image_repo }}:${{ matrix.variant }}-${{ github.sha }}
          labels: |
            org.opencontainers.image.source=${{ github.repository }}
            org.opencontainers.image.revision=${{ github.sha }}
            org.opencontainers.image.version=${{ steps.meta.outputs.version }}

      - name: Upload summary
        run: |
          echo "Built target: ${{ matrix.target }} (variant: ${{ matrix.variant }})" >> $GITHUB_STEP_SUMMARY
          echo "Tags:" >> $GITHUB_STEP_SUMMARY
          echo "- ${{ steps.names.outputs.image_repo }}:${{ matrix.variant }}-${{ steps.meta.outputs.version }}" >> $GITHUB_STEP_SUMMARY
          echo "- ${{ steps.names.outputs.image_repo }}:${{ matrix.variant }}-${{ github.sha }}" >> $GITHUB_STEP_SUMMARY
