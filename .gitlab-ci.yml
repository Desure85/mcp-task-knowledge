image: docker:24

services:
  - name: docker:24-dind
    command: ["--mtu=1450"]

variables:
  DOCKER_DRIVER: overlay2
  DOCKER_TLS_CERTDIR: ""
  # Speed up docker builds
  DOCKER_BUILDKIT: "1"
  # Defaults for external base images (can be overridden via CI variables)
  BASE_DEPS_IMAGE: "ghcr.io/Desure85/mcp-base-bm25:latest"
  BASE_MODELS_IMAGE: "ghcr.io/Desure85/mcp-base-onnx:latest"
  BASE_GPU_IMAGE: "ghcr.io/Desure85/mcp-base-onnx-gpu:latest"
  BASE_DEPS_IMAGE_CAT: "ghcr.io/Desure85/mcp-base-bm25-cat:latest"
  BASE_MODELS_IMAGE_CAT: "ghcr.io/Desure85/mcp-base-onnx-cat:latest"
  BASE_GPU_IMAGE_CAT: "ghcr.io/Desure85/mcp-base-onnx-gpu-cat:latest"

stages:
  - test
  - build
  - build2
  - release

.before: &before
  before_script:
    - echo "$CI_REGISTRY_PASSWORD" | docker login -u "$CI_REGISTRY_USER" --password-stdin "$CI_REGISTRY"
    # Optional: login to GHCR if cat/extbase base images are hosted there (requires GHCR_USER/GHCR_TOKEN CI vars)
    - |
      if [ -n "$GHCR_TOKEN" ] && [ -n "$GHCR_USER" ]; then
        echo "$GHCR_TOKEN" | docker login -u "$GHCR_USER" --password-stdin ghcr.io || true
      fi

.build_image_one: &build_image_one
  <<: *before
  script:
    - >
      docker build \
        --build-arg BASE_DEPS_IMAGE="$BASE_DEPS_IMAGE" \
        --build-arg BASE_MODELS_IMAGE="$BASE_MODELS_IMAGE" \
        --build-arg BASE_GPU_IMAGE="$BASE_GPU_IMAGE" \
        --build-arg BASE_DEPS_IMAGE_CAT="$BASE_DEPS_IMAGE_CAT" \
        --build-arg BASE_MODELS_IMAGE_CAT="$BASE_MODELS_IMAGE_CAT" \
        --build-arg BASE_GPU_IMAGE_CAT="$BASE_GPU_IMAGE_CAT" \
        -t "$CI_REGISTRY_IMAGE:${FLAVOR}-$CI_COMMIT_SHORT_SHA" \
        --target ${TARGET} mcp-task-knowledge
    - docker push "$CI_REGISTRY_IMAGE:${FLAVOR}-$CI_COMMIT_SHORT_SHA"
  rules:
    - if: '$CI_PIPELINE_SOURCE == "merge_request_event"'
    - if: '$CI_COMMIT_BRANCH && $CI_OPEN_MERGE_REQUESTS'
    - if: '$CI_COMMIT_BRANCH'

obsidian:smoke:
  stage: test
  image: node:20
  before_script:
    - node -v
    - npm -v
    - cd mcp-task-knowledge
    - npm ci
  script:
    - npm run build
    - npm run obsidian:smoke
  rules:
    - if: '$CI_PIPELINE_SOURCE == "merge_request_event"'
    - if: '$CI_COMMIT_BRANCH && $CI_OPEN_MERGE_REQUESTS'
    - if: '$CI_COMMIT_BRANCH'

knowledge:smoke:
  stage: test
  image: docker:24
  services:
    - name: docker:24-dind
      command: ["--mtu=1450"]
  variables:
    DOCKER_DRIVER: overlay2
    DOCKER_TLS_CERTDIR: ""
    DOCKER_BUILDKIT: "1"
    COMPOSE_FILE: mcp-task-knowledge/docker-compose.catalog.yml
  before_script:
    - apk add --no-cache bash curl jq
    - docker version
    - docker info
    - docker buildx version || true
    - docker buildx create --use || true
  script:
    - echo "# Bring up compose stack" && docker compose -f "$COMPOSE_FILE" up -d --build
    - docker compose -f "$COMPOSE_FILE" ps
    - |
      echo "# Wait for service-catalog healthy"
      SC_ID=$(docker compose -f "$COMPOSE_FILE" ps -q service-catalog)
      for i in $(seq 1 60); do
        HS=$(docker inspect -f '{{json .State.Health.Status}}' "$SC_ID" 2>/dev/null || echo '"starting"')
        echo "health: $HS"
        if [ "$HS" = '"healthy"' ]; then break; fi
        sleep 2
      done
      if [ "$HS" != '"healthy"' ]; then echo "Service Catalog not healthy"; docker logs "$SC_ID" --tail=200; exit 1; fi
    - |
      echo "# Run knowledge smoke inside mcp container"
      MCP_ID=$(docker compose -f "$COMPOSE_FILE" ps -q mcp)
      docker exec -i "$MCP_ID" sh -lc 'node /app/scripts/smoke_knowledge.mjs'
  after_script:
    - docker compose -f "$COMPOSE_FILE" logs --no-color --tail=200 || true
    - docker compose -f "$COMPOSE_FILE" down -v || true
  rules:
    - if: '$CI_PIPELINE_SOURCE == "merge_request_event"'
    - if: '$CI_COMMIT_BRANCH && $CI_OPEN_MERGE_REQUESTS'
    - if: '$CI_COMMIT_BRANCH'

tasks:smoke:
  stage: test
  image: docker:24
  services:
    - name: docker:24-dind
      command: ["--mtu=1450"]
  variables:
    DOCKER_DRIVER: overlay2
    DOCKER_TLS_CERTDIR: ""
    DOCKER_BUILDKIT: "1"
    COMPOSE_FILE: mcp-task-knowledge/docker-compose.catalog.yml
  before_script:
    - apk add --no-cache bash curl jq
    - docker version
    - docker info
    - docker buildx version || true
    - docker buildx create --use || true
  script:
    - echo "# Bring up compose stack" && docker compose -f "$COMPOSE_FILE" up -d --build
    - docker compose -f "$COMPOSE_FILE" ps
    - |
      echo "# Wait for service-catalog healthy"
      SC_ID=$(docker compose -f "$COMPOSE_FILE" ps -q service-catalog)
      for i in $(seq 1 60); do
        HS=$(docker inspect -f '{{json .State.Health.Status}}' "$SC_ID" 2>/dev/null || echo '"starting"')
        echo "health: $HS"
        if [ "$HS" = '"healthy"' ]; then break; fi
        sleep 2
      done
      if [ "$HS" != '"healthy"' ]; then echo "Service Catalog not healthy"; docker logs "$SC_ID" --tail=200; exit 1; fi
    - |
      echo "# Run tasks smoke inside mcp container"
      MCP_ID=$(docker compose -f "$COMPOSE_FILE" ps -q mcp)
      docker exec -i "$MCP_ID" sh -lc 'node /app/scripts/smoke_tasks.mjs'
      docker exec -i "$MCP_ID" sh -lc 'node /app/scripts/smoke_tasks_aliases.mjs'
  after_script:
    - docker compose -f "$COMPOSE_FILE" logs --no-color --tail=200 || true
    - docker compose -f "$COMPOSE_FILE" down -v || true
  rules:
    - if: '$CI_PIPELINE_SOURCE == "merge_request_event"'
    - if: '$CI_COMMIT_BRANCH && $CI_OPEN_MERGE_REQUESTS'
    - if: '$CI_COMMIT_BRANCH'

catalog:smoke:
  stage: test
  image: docker:24
  services:
    - name: docker:24-dind
      command: ["--mtu=1450"]
  variables:
    DOCKER_DRIVER: overlay2
    DOCKER_TLS_CERTDIR: ""
    DOCKER_BUILDKIT: "1"
    COMPOSE_FILE: mcp-task-knowledge/docker-compose.catalog.yml
  before_script:
    - apk add --no-cache bash curl jq
    - docker version
    - docker info
    - docker buildx version || true
    - docker buildx create --use || true
  script:
    - echo "# Bring up compose stack" && docker compose -f "$COMPOSE_FILE" up -d --build
    - docker compose -f "$COMPOSE_FILE" ps
    - |
      echo "# Wait for service-catalog healthy"
      SC_ID=$(docker compose -f "$COMPOSE_FILE" ps -q service-catalog)
      for i in $(seq 1 60); do
        HS=$(docker inspect -f '{{json .State.Health.Status}}' "$SC_ID" 2>/dev/null || echo '"starting"')
        echo "health: $HS"
        if [ "$HS" = '"healthy"' ]; then break; fi
        sleep 2
      done
      if [ "$HS" != '"healthy"' ]; then echo "Service Catalog not healthy"; docker logs "$SC_ID" --tail=200; exit 1; fi
    - |
      echo "# Run smoke.sh inside service-catalog container"
      SC_ID=$(docker compose -f "$COMPOSE_FILE" ps -q service-catalog)
      docker exec -i "$SC_ID" sh -lc 'apk add --no-cache bash jq >/dev/null 2>&1 || true; bash /app/scripts/smoke.sh'
  after_script:
    - docker compose -f "$COMPOSE_FILE" logs --no-color --tail=200 || true
    - docker compose -f "$COMPOSE_FILE" down -v || true
  rules:
    - if: '$CI_PIPELINE_SOURCE == "merge_request_event"'
    - if: '$CI_COMMIT_BRANCH && $CI_OPEN_MERGE_REQUESTS'
    - if: '$CI_COMMIT_BRANCH'

.release_images: &release_images
  stage: release
  <<: *before
  needs: ["build:bm25", "build:onnx-cpu", "build:onnx-gpu"]
  script:
    - |
      for FLAVOR in bm25 onnx-cpu onnx-gpu; do
        docker pull "$CI_REGISTRY_IMAGE:${FLAVOR}-$CI_COMMIT_SHORT_SHA"
        if [ -n "$CI_COMMIT_TAG" ]; then
          docker tag "$CI_REGISTRY_IMAGE:${FLAVOR}-$CI_COMMIT_SHORT_SHA" "$CI_REGISTRY_IMAGE:${FLAVOR}-$CI_COMMIT_TAG"
          docker push "$CI_REGISTRY_IMAGE:${FLAVOR}-$CI_COMMIT_TAG"
        fi
        if [ "$CI_COMMIT_BRANCH" = "$CI_DEFAULT_BRANCH" ]; then
          docker tag "$CI_REGISTRY_IMAGE:${FLAVOR}-$CI_COMMIT_SHORT_SHA" "$CI_REGISTRY_IMAGE:${FLAVOR}-latest"
          docker push "$CI_REGISTRY_IMAGE:${FLAVOR}-latest"
        fi
      done
  rules:
    - if: '$CI_COMMIT_TAG'
    - if: '$CI_COMMIT_BRANCH == $CI_DEFAULT_BRANCH'

build:bm25:
  stage: build
  variables:
    FLAVOR: bm25
    TARGET: runtime-bm25-extbase
  <<: *build_image_one

build:onnx-cpu:
  stage: build
  variables:
    FLAVOR: onnx-cpu
    TARGET: runtime-onnx-cpu-extbase
  <<: *build_image_one

build:onnx-gpu:
  stage: build2
  variables:
    FLAVOR: onnx-gpu
    TARGET: runtime-onnx-gpu-extbase
  <<: *build_image_one

# Catalog-embedded builds from cat-extbase
build:bm25-cat:
  stage: build
  variables:
    FLAVOR: bm25-cat
    TARGET: runtime-bm25-cat-extbase
  <<: *build_image_one
  rules:
    - if: '$CI_PIPELINE_SOURCE == "merge_request_event"'
    - if: '$CI_COMMIT_BRANCH && $CI_OPEN_MERGE_REQUESTS'
    - if: '$CI_COMMIT_BRANCH'

build:onnx-cpu-cat:
  stage: build
  variables:
    FLAVOR: onnx-cpu-cat
    TARGET: runtime-onnx-cpu-cat-extbase
  <<: *build_image_one
  rules:
    - if: '$CI_PIPELINE_SOURCE == "merge_request_event"'
    - if: '$CI_COMMIT_BRANCH && $CI_OPEN_MERGE_REQUESTS'
    - if: '$CI_COMMIT_BRANCH'

build:onnx-gpu-cat:
  stage: build2
  variables:
    FLAVOR: onnx-gpu-cat
    TARGET: runtime-onnx-gpu-cat-extbase
  <<: *build_image_one
  rules:
    - if: '$CI_PIPELINE_SOURCE == "merge_request_event"'
    - if: '$CI_COMMIT_BRANCH && $CI_OPEN_MERGE_REQUESTS'
    - if: '$CI_COMMIT_BRANCH'

selfcheck:onnx-cpu:
  stage: test
  image: docker:24
  services:
    - name: docker:24-dind
      command: ["--mtu=1450"]
  variables:
    DOCKER_DRIVER: overlay2
    DOCKER_TLS_CERTDIR: ""
    DOCKER_BUILDKIT: "1"
  before_script:
    - apk add --no-cache bash
    - docker version
    - docker info
    - docker buildx version || true
    - docker buildx create --use || true
  script:
    - cd mcp-task-knowledge
    - bash scripts/onnx_cpu_selfcheck.sh
  rules:
    - if: '$CI_PIPELINE_SOURCE == "merge_request_event"'
    - if: '$CI_COMMIT_BRANCH && $CI_OPEN_MERGE_REQUESTS'
    - if: '$CI_COMMIT_BRANCH'
